name: CI/CD Pipeline

on:
  push:

jobs:
  install_exceptions_module:
    runs-on: ubuntu-latest
    steps:
      - name: Check out the repo
        uses: actions/checkout@v3

      - name: Set up Java and Maven
        uses: actions/setup-java@v3
        with:
          java-version: '21'
          distribution: 'adopt'
          cache: maven

      - name: Install exceptions module
        run: mvn -f exceptions/pom.xml clean install

      - name: Cache Maven repository
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}

  test_services:
    runs-on: ubuntu-latest
    needs: install_exceptions_module
    strategy:
      matrix:
        service: [audit-service, flat-service, parser-service, sender-service, user-service]
    steps:
      - name: Check out the repo
        uses: actions/checkout@v3

      - name: Restore Maven cache
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Set up Java and Maven
        uses: actions/setup-java@v3
        with:
          java-version: '21'
          distribution: 'adopt'
          cache: maven

      - name: Run tests for "${{ matrix.service }}"
        run: |
          cd ${{ matrix.service }}
          mvn clean test

      - name: Package service JAR
        run: |
          cd ${{ matrix.service }}
          mvn package -DskipTests

      - name: Archive JAR files
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.service }}
          path: ${{ matrix.service }}/target/*.jar

  build_db:
    runs-on: ubuntu-latest
    needs: test_services
    strategy:
      matrix:
        db_s: [audit-db, user-db, flat-db]
    steps:
      - name: Check out the repo
        uses: actions/checkout@v3

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        run: echo ${{ secrets.REGISTRY_TOKEN }} | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Build and push Docker images
        uses: docker/build-push-action@v6
        with:
          context: ./${{ matrix.db_s }}
          file: ./${{ matrix.db_s }}/Dockerfile
          push: true
          tags: ghcr.io/${{ github.repository_owner }}/${{ matrix.db_s }}:latest



  build_services:
    runs-on: ubuntu-latest
    needs: test_services
    strategy:
      matrix:
        service: [audit-service, flat-service, parser-service, sender-service, user-service]
    steps:
      - name: Check out the repo
        uses: actions/checkout@v3

      - name: Download JAR files
        uses: actions/download-artifact@v3
        with:
          name: ${{ matrix.service }}
          path: ${{ matrix.service }}/target/*.jar

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        run: echo ${{ secrets.REGISTRY_TOKEN }} | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Build and push Docker images
        uses: docker/build-push-action@v6
        with:
          context: ./${{ matrix.service }}/target
          file: ./${{ matrix.service }}/Dockerfile
          push: true
          tags: ghcr.io/${{ github.repository_owner }}/${{ matrix.service }}:latest
          build-args: |
            JAR_FILE=*.jar

  deploy:
    runs-on: ubuntu-22.04
    needs: [ build_services, build_db ]

    env:
      REGISTRY: ghcr.io
      IMAGE_NAME: ${{ github.repository }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Debug known_hosts
        run: cat ~/.ssh/known_hosts

      - name: Install SSH keys and Docker context
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan ${{ secrets.KNOWN_HOSTS}} >> ~/.ssh/known_hosts
          docker context create remote --docker "host=ssh://${{ secrets.REMOTE_USER }}@${{ secrets.REMOTE_HOST }}"

      - name: Debug known_hosts
        run: cat ~/.ssh/known_hosts

      - name: Extract metadata (tags, labels) for Docker image
        id: meta
        uses: docker/metadata-action@9ec57ed1fcdbf14dcef7dfbe97b2010124a938b7
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

      - name: Log in to GitHub Container Registry
        run: echo ${{ secrets.REGISTRY_TOKEN }} | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Docker Compose up
        env:
          IMAGE_REF: ${{ steps.meta.outputs.tags }}
          # Добавьте любые другие еременныеокружния, котрые необходиы для вашего Docker Compose
        run: |
          docker-compose --context remote -f docker-compose.yml up -d

      - name: Clean up SSH keys
        run: rm -rf ~/.ssh
