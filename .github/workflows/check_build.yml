name: CI/CD Pipeline

on:
  push:

jobs:
  install_exceptions_module:
    runs-on: ubuntu-latest
    steps:
      - name: Check out the repo
        uses: actions/checkout@v3

      - name: Clear local maven rep
        run: rm -rf ~/.m2/repository

      - name: Set up Java and Maven
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'adopt'
          cache: maven

      - name: Install exceptions module
        run: mvn -f exceptions/pom.xml clean install

      - name: Cache Maven repository
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}

  test_services:
    runs-on: ubuntu-latest
    needs: install_exceptions_module
    strategy:
      matrix:
        service: [audit-service, flat-service, parser-service, sender-service, user-service]
    steps:
      - name: Check out the repo
        uses: actions/checkout@v3

      - name: Restore Maven cache
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Set up Java and Maven
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'adopt'
          cache: maven

      - name: Package service JAR
        run: |
          cd ${{ matrix.service }}
          mvn clean package

      - name: Find JAR file
        id: find_jar
        run: |
          echo "FILE_PATH=$(find ./${{ matrix.service }}/target/ -name '${{ matrix.service }}-*.jar' | head -n 1)" >> "$GITHUB_OUTPUT"

      - name: Get JAR file name
        id: get_jar_name
        run: |
          JAR_NAME=$(basename "${{ steps.find_jar.outputs.FILE_PATH }}")
          echo "JAR_NAME=${JAR_NAME}" >> "$GITHUB_OUTPUT"

      - name: Save environment variables to file
        run: |
          echo "FILE_PATH=${{ steps.find_jar.outputs.FILE_PATH }}" > ${{ matrix.service }}.env
          echo "JAR_NAME=${{ steps.get_jar_name.outputs.JAR_NAME }}" >> ${{ matrix.service }}.env

      - name: Archive JAR file
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.service }}-jar
          path: ${{ steps.find_jar.outputs.FILE_PATH }}

      - name: Archive environment file
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.service }}-env
          path: ${{ matrix.service }}.env

  build_db:
    runs-on: ubuntu-latest
    needs: test_services
    strategy:
      matrix:
        db_s: [audit-db, user-db, flat-db, sender-db]
    steps:
      - name: Check out the repo
        uses: actions/checkout@v3

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        run: echo ${{ secrets.REGISTRY_TOKEN }} | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Build and push Docker images
        uses: docker/build-push-action@v6
        with:
          context: ./${{ matrix.db_s }}
          file: ./${{ matrix.db_s }}/Dockerfile
          push: true
          tags: ghcr.io/${{ github.repository_owner }}/${{ matrix.db_s }}:1.0.0

  build_services:
    runs-on: ubuntu-latest
    needs: test_services
    strategy:
      matrix:
        service: [audit-service, flat-service, parser-service, sender-service, user-service]
    steps:
      - name: Check out the repo
        uses: actions/checkout@v3

      - name: Download JAR files
        uses: actions/download-artifact@v3
        with:
          name: ${{ matrix.service }}-jar
          path: ./${{ matrix.service }}/target

      - name: Download environment file
        uses: actions/download-artifact@v3
        with:
          name: ${{ matrix.service }}-env
          path: ./

      - name: Load environment variables
        run: |
          source ./${{ matrix.service }}.env
          echo "FILE_PATH=${FILE_PATH}" >> $GITHUB_ENV
          echo "JAR_NAME=${JAR_NAME}" >> $GITHUB_ENV

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        run: echo ${{ secrets.REGISTRY_TOKEN }} | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Create Docker image dir if not exists
        run: mkdir -p ./${{ matrix.service }}/docker_image/

      - name: Copy JAR file to Docker image dir
        run: cp "${{ env.FILE_PATH }}" ./${{ matrix.service }}/docker_image/

      - name: Create application-prod.yml from template
        run: |
          mkdir -p ./${{ matrix.service }}/docker_image

          if [[ ${{ matrix.service }} == 'audit-service' ]]; then
            sed -e 's|{{AUDIT_DB_URL}}|${{ secrets.AUDIT_DB_URL }}|' \
                -e 's|{{DB_USR}}|${{ secrets.DB_USR }}|' \
                -e 's|{{DB_PSW}}|${{ secrets.DB_PSW }}|' \
                -e 's|{{JWT_SECRET}}|${{ secrets.JWT_SECRET }}|' \
                ./${{ matrix.service }}/src/main/resources/application-prod.yml >  ./${{ matrix.service }}/docker_image/application-prod.yml
          fi

          if [[ ${{ matrix.service }} == 'flat-service' ]]; then
            sed -e 's|{{FLAT_DB_URL}}|${{ secrets.FLAT_DB_URL }}|' \
                -e 's|{{DB_USR}}|${{ secrets.DB_USR }}|' \
                -e 's|{{DB_PSW}}|${{ secrets.DB_PSW }}|' \
                -e 's|{{JWT_SECRET}}|${{ secrets.JWT_SECRET }}|' \
                -e 's|{{REPOSITORY_OWNER}}|${{ github.repository_owner }}|' \
                ./${{ matrix.service }}/src/main/resources/application-prod.yml >  ./${{ matrix.service }}/docker_image/application-prod.yml
          fi

          if [[ ${{ matrix.service }} == 'parser-service' ]]; then
            sed -e 's|{{FLAT_DB_URL}}|${{ secrets.FLAT_DB_URL }}|' \
                -e 's|{{DB_USR}}|${{ secrets.DB_USR }}|' \
                -e 's|{{DB_PSW}}|${{ secrets.DB_PSW }}|' \
                -e 's|{{JWT_SECRET}}|${{ secrets.JWT_SECRET }}|' \
                -e 's|{{REPOSITORY_OWNER}}|${{ github.repository_owner }}|' \
                ./${{ matrix.service }}/src/main/resources/application-prod.yml >  ./${{ matrix.service }}/docker_image/application-prod.yml
          fi

          if [[ ${{ matrix.service }} == 'sender-service' ]]; then
            sed -e 's|{{SENDER_DB_URL}}|${{ secrets.SENDER_DB_URL }}|' \
                -e 's|{{DB_USR}}|${{ secrets.DB_USR }}|' \
                -e 's|{{DB_PSW}}|${{ secrets.DB_PSW }}|' \
                -e 's|{{SENDER_SMPT_HOST}}|${{ secrets.SENDER_SMPT_HOST }}|' \
                -e 's|{{SENDER_SMPT_PORT}}|${{ secrets.SENDER_SMPT_PORT }}|' \
                -e 's|{{SENDER_SMPT_USERNAME}}|${{ secrets.SENDER_SMPT_USERNAME }}|' \
                -e 's|{{SENDER_SMPT_PSW}}|${{ secrets.SENDER_SMPT_PSW }}|' \
                -e 's|{{JWT_SECRET}}|${{ secrets.JWT_SECRET }}|' \
                -e 's|{{REPOSITORY_OWNER}}|${{ github.repository_owner }}|' \
                ./${{ matrix.service }}/src/main/resources/application-prod.yml >  ./${{ matrix.service }}/docker_image/application-prod.yml
          fi

          if [[ ${{ matrix.service }} == 'user-service' ]]; then
            sed -e 's|{{USER_DB_URL}}|${{ secrets.USER_DB_URL }}|' \
                -e 's|{{DB_USR}}|${{ secrets.DB_USR }}|' \
                -e 's|{{DB_PSW}}|${{ secrets.DB_PSW }}|' \
                -e 's|{{JWT_SECRET}}|${{ secrets.JWT_SECRET }}|' \
                -e 's|{{REPOSITORY_OWNER}}|${{ github.repository_owner }}|' \
                ./${{ matrix.service }}/src/main/resources/application-prod.yml > ./${{ matrix.service }}/docker_image/application-prod.yml
          fi
        shell: /usr/bin/bash -e {0}


      - name: List contents of docker_image directory
        run: ls -la ./${{ matrix.service }}/docker_image
        
      - name: Display application-prod.yml contents
        run: cat ./${{ matrix.service }}/docker_image/application-prod.yml

      - name: Build and push Docker images
        uses: docker/build-push-action@v6
        with:
          context: ./${{ matrix.service }}/docker_image
          file: ./${{ matrix.service }}/Dockerfile
          push: true
          tags: ghcr.io/${{ github.repository_owner }}/${{ matrix.service }}:1.0.0
          build-args: |
            JAR_FILE=${{ env.JAR_NAME }}


  deploy:
    runs-on: ubuntu-22.04
    needs: [build_services, build_db]

    env:
      REGISTRY: ghcr.io
      IMAGE_NAME: ${{ github.repository }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install SSH keys and Docker context
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H "${{ secrets.REMOTE_HOST }}" >> ~/.ssh/known_hosts
          docker context create remote --docker "host=ssh://${{ secrets.REMOTE_USER }}@${{ secrets.REMOTE_HOST }}"

      - name: Debug known_hosts
        run: cat ~/.ssh/known_hosts

      - name: Extract metadata (tags, labels) for Docker image
        id: meta
        uses: docker/metadata-action@9ec57ed1fcdbf14dcef7dfbe97b2010124a938b7
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

      - name: Log in to the Container registry
        run: echo ${{ secrets.REGISTRY_TOKEN }} | docker login ${{env.REGISTRY}} -u markmiklash@gmail.com --password-stdin

      - name: Docker Compose up
        env:
          IMAGE_REF: ${{ steps.meta.outputs.tags }}
        run: |
          docker-compose --context remote -f docker-compose.yml up -d

      - name: Clean up SSH keys
        run: rm -rf ~/.ssh
